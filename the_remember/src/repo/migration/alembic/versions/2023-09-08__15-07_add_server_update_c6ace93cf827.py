"""add server_update

Revision ID: c6ace93cf827
Revises: 7ddbededca1f
Create Date: 2023-09-08 15:07:48.639918

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy import func

# revision identifiers, used by Alembic.
revision = 'c6ace93cf827'
down_revision = '7ddbededca1f'
branch_labels = None
depends_on = None


update_columns_map = {
            "folder": "updated_at",
            "module": "updated_at",
            "add_info_of_term": "updated_at",
            "sentence": "updated_at",
            "term": "updated_at",
            "user": "updated_at",

            "personalize_folder": "personal_updated_at",
            "personalize_module": "personal_updated_at",
            "personalize_term": "personal_updated_at",
        }


def func_name(field_name: str):
    return f'trigger_set_timestamp_as_{field_name}'


def trigger_name(table_name: str, field_name: str):
    return f'set_timestamp_{field_name}_as_{table_name}'


def upgrade():
    # TODO: check it!
    # ### commands auto generated by Alembic - please adjust! ###
    commands = [
                   f""" 
CREATE OR REPLACE FUNCTION {func_name(i)}()
RETURNS TRIGGER AS $$
BEGIN
  NEW.{i} = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;
         """ for i in set(update_columns_map.values())] + [
                   f"""
        CREATE or REPLACE TRIGGER  {trigger_name(k, v)}
BEFORE UPDATE ON "{k}"
FOR EACH ROW
EXECUTE PROCEDURE {func_name(v)}();
        """ for (k, v) in update_columns_map.items()
               ]
    [op.execute(i) for i in commands]
    # op.alter_column('folder', 'updated_at', server_onupdate=func.now())
    # ### end Alembic commands ###


def downgrade():
    # TODO: check it!
    commands = [  # language=postgresql
                   f"""
            drop TRIGGER if exists {trigger_name(k, v)}  on "{k}"
            """ for (k, v) in update_columns_map.items()
               ] + [
        # language=postgresql
                   f""" 
                   drop FUNCTION if exists {func_name(i)};
             """ for i in set(update_columns_map.values())]

    [op.execute(i) for i in commands]
    # ### commands auto generated by Alembic - please adjust! ###
    # op.alter_column('folder', 'updated_at', server_onupdate=None)
    # ### end Alembic commands ###
