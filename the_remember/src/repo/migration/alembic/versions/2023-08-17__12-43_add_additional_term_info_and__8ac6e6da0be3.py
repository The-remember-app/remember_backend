"""add additional term info and personalize folder

Revision ID: 8ac6e6da0be3
Revises: e49d6e8364c5
Create Date: 2023-08-17 12:43:05.785331

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '8ac6e6da0be3'
down_revision = 'e49d6e8364c5'
branch_labels = None
depends_on = None


def upgrade():
    # TODO: check it!
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('personalize_folder',
                    sa.Column('folder_id', sa.UUID(), nullable=False),
                    sa.Column('user_id', sa.UUID(), nullable=False),
                    sa.Column('personal_created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
                    sa.Column('personal_updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
                    sa.ForeignKeyConstraint(['folder_id'], ['folder.id'], ),
                    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
                    sa.PrimaryKeyConstraint('folder_id', 'user_id')
                    )
    op.create_table('add_info_of_term',
                    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
                    sa.Column('text_data', sa.String(), nullable=True),
                    sa.Column('adding_text_data', sa.String(), nullable=True),
                    sa.Column('dialect_or_area', sa.String(), nullable=True),
                    sa.Column('add_info_type', postgresql.ENUM('usual_term', 'other_form', 'help_phrase_with_word',
                                                               'help_phrase_without_word', 'abbreviation', 'sound', 'composite_word',
                                                               'transcription', name='add_info_type__enum'),
                              nullable=False),
                    sa.Column('term_id', sa.UUID(), nullable=False),
                    sa.Column('parent_add_info_id', sa.UUID(), nullable=True),
                    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
                    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
                    sa.ForeignKeyConstraint(['parent_add_info_id'], ['add_info_of_term.id'], ),
                    sa.ForeignKeyConstraint(['term_id'], ['term.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )

    op.add_column('folder', sa.Column('author_id', sa.UUID(), nullable=True))
    op.execute(  # language=PostgreSQL
        """
        UPDATE folder
        set
         author_id = user_id
        """
    )
    op.alter_column('folder', 'author_id', nullable=False)
    op.drop_constraint('folder_user_id_fkey', 'folder', type_='foreignkey')

    op.create_foreign_key("folder__author_id__fkey", 'folder', 'user', ['author_id'], ['id'])
    op.drop_column('folder', 'user_id')

    op.execute(  # language=PostgreSQL
        """
        insert into add_info_of_term (text_data, add_info_type, term_id)
        select transcription, 'transcription'::add_info_type__enum, id
        from term
        where transcription is not NULL
        """
    )
    op.drop_column('term', 'transcription')
    # ### end Alembic commands ###


def downgrade():
    # TODO: check it!
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('term', sa.Column('transcription', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.execute(  # language=PostgreSQL
        """
        UPDATE term
        set
         transcription = a_.text_data
         from (select * from add_info_of_term where add_info_type = 'transcription'::add_info_type__enum) as a_
         where term.id = a_.term_id
        """
    )

    op.add_column('folder', sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True))
    op.execute(  # language=PostgreSQL
        """
        UPDATE folder
        set
         user_id = author_id
        """
    )
    op.alter_column('folder', 'author_id', nullable=False)
    op.drop_constraint("folder__author_id__fkey", 'folder', type_='foreignkey')
    op.create_foreign_key('folder_user_id_fkey', 'folder', 'user', ['user_id'], ['id'])
    op.drop_column('folder', 'author_id')

    op.drop_table('add_info_of_term')
    op.drop_table('personalize_folder')

    op.execute(  # language=PostgreSQL
        """
        drop type  if exists add_info_type__enum
        """
    )
    # op.execute(  # language=PostgreSQL
    #     """
    #     alter type  add_info_type__enum add value 'composite_word';
    #     """
    # )

    # op.execute(# language=PostgreSQL
    #     """
    # create type add_info_type__enum as enum ('usual_term', 'other_form', 'help_phrase_with_word', 'help_phrase_without_word', 'abbreviation', 'sound', 'transcription', 'dialect_or_area');
    #
    # """)

    # ### end Alembic commands ###
